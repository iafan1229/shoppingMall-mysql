name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug Repository Structure
        run: |
          echo "프로젝트 루트 디렉토리 내용:"
          ls -la
          echo "디렉토리 존재 여부 확인:"
          if [ -d "frontend" ]; then echo "frontend ✓"; else echo "frontend ✗"; fi
          if [ -d "server" ]; then echo "server ✓"; else echo "server ✗"; fi
          if [ -d "nginx" ]; then echo "nginx ✓"; else echo "nginx ✗"; fi

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          # EC2_SSH_KEY 사용: SSH 개인키를 파일로 저장
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          # EC2_HOST 사용: SSH 설정 파일에 EC2 인스턴스 주소 설정
          echo -e "Host ec2\n\tHostName ${{ secrets.EC2_HOST }}\n\tUser ec2-user\n\tIdentityFile ~/.ssh/ec2_key.pem\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      - name: Create Remote Directories
        run: |
          ssh ec2 "mkdir -p ~/photo-look/{frontend,server,nginx,nginx/ssl}"
          echo "원격 디렉토리 생성 완료"

      - name: Upload Project Files
        run: |
          # 프론트엔드 코드 전송
          if [ -d "frontend" ]; then
            echo "프론트엔드 파일 전송 중..."
            scp -r frontend/* ec2:~/photo-look/frontend/
            echo "프론트엔드 파일 전송 완료"
          else
            echo "프론트엔드 디렉토리가 없습니다!"
            exit 1
          fi

          # 서버 코드 전송
          if [ -d "server" ]; then
            echo "서버 파일 전송 중..."
            scp -r server/* ec2:~/photo-look/server/
            echo "서버 파일 전송 완료"
          else
            echo "서버 디렉토리가 없습니다!"
            exit 1
          fi

          # Nginx 설정 파일 전송
          if [ -d "nginx" ]; then
            echo "Nginx 설정 파일 전송 중..."
            scp -r nginx/* ec2:~/photo-look/nginx/
            echo "Nginx 설정 파일 전송 완료"
          else
            echo "Nginx 디렉토리가 없습니다! 기본 설정을 생성합니다."
            
            # Nginx Dockerfile 생성
            ssh ec2 "cat > ~/photo-look/nginx/Dockerfile << 'EOL'
          FROM nginx:1.25-alpine
          RUN rm /etc/nginx/conf.d/default.conf
          COPY nginx.conf /etc/nginx/conf.d/
          RUN mkdir -p /etc/nginx/ssl
          RUN sed -i 's/# server_tokens off/server_tokens off/' /etc/nginx/nginx.conf
          EXPOSE 80
          EXPOSE 443
          CMD [\"nginx\", \"-g\", \"daemon off;\"]
          EOL"
            
            # Nginx 설정 파일 생성
            ssh ec2 "cat > ~/photo-look/nginx/nginx.conf << 'EOL'
          server {
              listen 80;
              server_name _;
              
              # 프론트엔드 서비스 프록시
              location / {
                  proxy_pass http://frontend:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              
              # 백엔드 API 프록시
              location /api {
                  proxy_pass http://server:8080;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              
              # 정적 파일 캐싱
              location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
                  proxy_pass http://frontend:3000;
                  expires 30d;
                  access_log off;
                  add_header Cache-Control "public";
              }
              
              # 최대 요청 크기 설정
              client_max_body_size 10M;
          }
          EOL"
            
            echo "Nginx 기본 설정 생성 완료"
          fi

          # Docker Compose 파일 전송
          echo "Docker Compose 파일 전송 중..."
          scp docker-compose.yml ec2:~/photo-look/
          echo "Docker Compose 파일 전송 완료"

      - name: Install Docker and Docker Compose
        run: |
          ssh ec2 "if ! command -v docker &> /dev/null; then
            echo '도커 설치 중...'
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker \$(whoami)
            echo '도커 설치 완료'
          else
            echo '도커가 이미 설치되어 있습니다.'
          fi

          if ! command -v docker-compose &> /dev/null; then
            echo '도커 컴포즈 설치 중...'
            sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            echo '도커 컴포즈 설치 완료'
          else
            echo '도커 컴포즈가 이미 설치되어 있습니다.'
          fi"

      - name: Setup Swap Space
        run: |
          ssh ec2 "if [ ! -f /swapfile ]; then
            echo '스왑 설정 중...'
            sudo dd if=/dev/zero of=/swapfile bs=128M count=8
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
            echo '스왑 설정 완료'
          else
            echo '스왑이 이미 설정되어 있습니다.'
          fi"

      - name: Create Environment Files
        env:
          # Frontend 환경변수
          NEXT_PUBLIC_GOOGLE_CLOUD_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_CLOUD_API_KEY }}
          NEXT_PUBLIC_GEMINI_API_KEY: ${{ secrets.NEXT_PUBLIC_GEMINI_API_KEY }}
          NEXT_PUBLIC_INSTAGRAM_ACCESS_TOKEN: ${{ secrets.NEXT_PUBLIC_INSTAGRAM_ACCESS_TOKEN }}
          NEXT_PUBLIC_S3_ACCESS_KEY_ID: ${{ secrets.NEXT_PUBLIC_S3_ACCESS_KEY_ID }}
          NEXT_PUBLIC_S3_SECRET_ACCESS_KEY: ${{ secrets.NEXT_PUBLIC_S3_SECRET_ACCESS_KEY }}
          # Server 환경변수
          DB_PASS: ${{ secrets.DB_PASS }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          HOST: ${{ secrets.HOST }}
          PORT: ${{ secrets.PORT }}
          SITE_URL: ${{ secrets.SITE_URL }}
        run: |
          echo "환경변수 파일 생성 중..."

          # Frontend .env 파일 생성
          ssh ec2 "cat > ~/photo-look/frontend/.env << 'EOL'
          NEXT_PUBLIC_GOOGLE_CLOUD_API_KEY=$NEXT_PUBLIC_GOOGLE_CLOUD_API_KEY
          NEXT_PUBLIC_GEMINI_API_KEY=$NEXT_PUBLIC_GEMINI_API_KEY
          NEXT_PUBLIC_INSTAGRAM_ACCESS_TOKEN=$NEXT_PUBLIC_INSTAGRAM_ACCESS_TOKEN
          NEXT_PUBLIC_S3_ACCESS_KEY_ID=$NEXT_PUBLIC_S3_ACCESS_KEY_ID
          NEXT_PUBLIC_S3_SECRET_ACCESS_KEY=$NEXT_PUBLIC_S3_SECRET_ACCESS_KEY
          EOL"

          # Server .env 파일 생성
          ssh ec2 "cat > ~/photo-look/server/.env << 'EOL'
          DB_PASS=$DB_PASS
          AWS_REGION=$AWS_REGION
          AWS_S3_BUCKET_NAME=$AWS_S3_BUCKET_NAME
          AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID 
          AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          EMAIL_PASS=$EMAIL_PASS
          EMAIL_USER=$EMAIL_USER
          HOST=$HOST
          PORT=$PORT
          SITE_URL=$SITE_URL
          EOL"

          echo "환경변수 파일 생성 완료"

      - name: Deploy Application
        run: |
          echo "현재 실행 중인 컨테이너 확인:"
          ssh ec2 "cd ~/photo-look && docker ps || echo '실행 중인 컨테이너 없음'"

          echo "기존 컨테이너 중지 중..."
          ssh ec2 "cd ~/photo-look && docker-compose down || echo '중지할 컨테이너 없음'"

          echo "새 애플리케이션 배포 중..."
          # docker-compose.yml이 .env 파일을 읽어서 실행
          ssh ec2 "cd ~/photo-look && docker-compose up -d --build"

          echo "배포 상태 확인 중..."
          ssh ec2 "cd ~/photo-look && docker-compose ps"

          echo "컨테이너 로그 확인:"
          ssh ec2 "cd ~/photo-look && docker-compose logs --tail=10"

      - name: Deployment Summary
        run: |
          echo "===== 배포 요약 ====="
          echo "배포 시간: $(date)"
          echo "배포 대상: ${{ secrets.EC2_HOST }}"
          echo "배포 서비스: 프론트엔드, 백엔드, Nginx"
          echo "실행 중인 컨테이너:"
          ssh ec2 "cd ~/photo-look && docker-compose ps"
          echo "======================"
